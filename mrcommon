# ---------------------------------------------------------------------------- #
# Utility functions to handle arch linux package building and AUR downloads    #
# ---------------------------------------------------------------------------- #

lib=
        archdir="$AB2_ARCH_DIR"
        builddir="$HOME/opt/arch/build"
        if [ ! -d "$builddir" ]; then
            echo "ERROR: build directory does not exist. Please create it."
            echo "Path: $builddir"
            exit 1
        fi   
        # need to dereference symlinks, otherwise subtle crap may happen when building stuff.
        # for instance, emacs gets the autoloads paths wrong
        builddir="$(readlink -f "$builddir")"
        ##                     
        # commit_if_changes <path> <message>
        # Commits changes to a repo if there are any, otherwise do nothing.
        ##
        commit_if_changes() {
            local srcpath="$(readlink -f "$1")"
            local message="$2"
            (
                cd "$srcpath"
                local num="$(git status --porcelain | wc -l)"
                if [[ $num -ge 1 ]]; then            
                    git add -A .
                fi
                local num="$(git status --porcelain | wc -l)"
                if [[ $num -ge 1 ]]; then
                    git commit -m "$message ($num files)"
                fi
            )
        }
        ## 
        # pkgbuild_parse <path> <element>
        # Parse a pkgbuild file and return the given <element>
        ##
        pkgbuild_parse() {
            $archdir/bin/pkgbuild-parse.sh "$@"
        }
        ##
        # pkgbuild_package_file <path>
        # Return the package file a PKGBUILD will produce. May need
        # access to sources in order to compute the version
        ##
        pkgbuild_package_file() {
            local srcpath="$(readlink -f "$1")"
            pkgfile="$(pkgbuild_parse "$srcpath/PKGBUILD" pkgfile)"
            echo "$srcpath/$pkgfile"
        }
        ##
        # pkgbuild_source_paths <path>
        # List sources from the PKGBUILD
        ##
        pkgbuild_source_paths() {
            local srcpath="$(readlink -f "$1")"
            pkgbuild_parse "$srcpath/PKGBUILD" localsource
        }
        ##
        # package_uptodate <path>
        # Check whether the package is up to date or needs building
        ##
        package_uptodate() {
            local srcpath="$(readlink -f "$1")"
            local pkgfile="$(pkgbuild_package_file $srcpath)"
            if [ -z "$pkgfile" ]; then
                echo "An error occurred parsing the PKGBUILD"
                exit 1
            fi        
            [ -f  "$pkgfile" ]
        }
        ## 
        # package_repo <path>
        # Get the repo a package belongs
        ##
        package_repo() {
            local srcpath="$(readlink -f "$1")"            
            local srcdir="$(dirname "$srcpath")"
            echo "$(basename "$srcdir")"
        }
        ##
        # builddir_path <path>
        # Get the path of the directory where the package will be built.
        ##
        builddir_path() {
            local srcpath="$(readlink -f "$1")"
            local pkgname="$(basename "$srcpath")"
            echo "$builddir/$pkgname"           
        }
        ##
        # check_package_directory <path>
        # Fail if path does not contain a PKGBUILD
        ##
        check_package_directory () {
            local srcpath="$(readlink -f "$1")" 
            if [ ! -f "$srcpath/PKGBUILD" ]; then
                echo "Can't find a PKGBUILD in $1"
                exit 1
            fi   
        }
        ##
        # prepare_build <path>
        # Prepares a package for building on the builddir
        # returns the path where the building will occur
        ##
        prepare_build() {
            local srcpath="$(readlink -f "$1")"
            local buildpath="$(builddir_path "$srcpath")"
            rsync -avz --exclude=.git "$srcpath/" "$buildpath/" > /dev/null
            echo "$buildpath"            
        }
        ##
        # pkgbuild_update_from_build <path>
        # Updates the PKGBUILD from the one on the build dir (for updated version)
        ##
        pkgbuild_update() {
            local srcpath="$(readlink -f "$1")"
            local buildpath="$(builddir_path "$srcpath")"
            if [ -f "$buildpath/PKGBUILD" ]; then
                echo "Updating source PKGBUILD"
                cp "$buildpath/PKGBUILD" "$srcpath/PKGBUILD"
            fi 
            commit_if_changes "$srcpath" "Updated PKGBULD"            
        }
        ##
        # pkgbuild_bump <path>
        # Bump the pkgrel
        ##
        pkgbuild_bump() {
            local srcpath="$(readlink -f "$1")"
            local pkgbuild="$srcpath/PKGBUILD"            
            if [ -f "$pkgbuild" ]; then
                local pkgrel="$(pkgbuild_parse "$pkgbuild" pkgrel)"
                local pkgrel=`expr $pkgrel + 1`
                echo "Bumping pkgrel: $pkgrel"
                sed -i s/pkgrel=.*$/pkgrel=$pkgrel/ "$pkgbuild"
                commit_if_changes "$srcpath" "Bump pkgrel"            
            fi
        }
        ##
        # package_build <path>
        # Build a package at the given directory.
        ##
        package_build() {
            local srcpath="$(readlink -f "$1")"
            (
                cd "$srcpath"
                makepkg -f --sign
            )
        }
        ##
        # package_download <path>
        # Download package sources.
        ##
        package_download() {
            local srcpath="$(readlink -f "$1")"
            (
                cd "$srcpath"
                makepkg --nobuild
            )            
        }
        ##
        # package_install <path>
        # Install a package.
        ##
        package_install() {
            local srcpath="$(readlink -f "$1")"
            local pkgname="$(basename "$srcpath")"
            local pkgfile="$(pkgbuild_package_file "$srcpath")"
            if [ -f "$pkgfile" ]; then
                sudo pacman --noconfirm -U "file://$pkgfile"               
            fi             
        }
        ##
        # package_install_deps <path>
        # Install package deps.
        ##
        package_install_deps() {
            local srcpath="$(readlink -f "$1")"
            (
                cd "$srcpath"
                makepkg -s
            )
        }
        ##
        # package_repoadd <path>
        # Add package to the pacman repo and clean older versions of it.
        ##
        package_repoadd() {
            local srcpath="$(readlink -f "$1")"
            local tgtrepo="$2"
            local pkgname="$(basename "$srcpath")"
            local pkgfile="$(pkgbuild_package_file "$srcpath")"
            local repodb="$(basename "$tgtrepo").db.tar.gz"
            if [ -f "$pkgfile" ]; then
                # clean older packages
                rm -f $tgtrepo/$pkgname-*.pkg.tar.xz{,.sig}
                # copy package and signature
                cp "$pkgfile" "$tgtrepo/"
                cp "$pkgfile.sig" "$tgtrepo/"
                repo-add "$tgtrepo/$repodb" "$pkgfile"
            fi
        }
        package_repodel() {
            # package_repodel <path>
            # Delete a package from the repo.
            local srcpath="$(readlink -f "$1")"
            local tgtrepo="$2"
            local pkgname="$(basename "$srcpath")"
            local repodb="$(basename "$tgtrepo").db.tar.gz"
            rm -f $tgtrepo/$pkgname-*.pkg.tar.xz{,.sig}
            repo-remove "$tgtrepo/$repodb" "$pkgname"
        }
        ##
        # aur_checkout <pkgname>
        # Checkout a PKGBUILD from AUR
        ##
        aur_checkout() {
            local pkgname="$1"
            cower -df --ignorerepo "$pkgname"
            (
                cd "$pkgname"
                git init && \
                git add -A . && \
                git commit -m 'Initial commit'
            )
        }
        ##
        # aur_update <path>
        # Update git repo with last PKGBUILD from AUR.                                   
        ##
        aur_update() {
            local srcpath="$(readlink -f "$1")"
            local pkgname="$(basename "$srcpath")"
            # NOTE: only update on branch master, to preserve possible local changes.
            if [ ! "$(git symbolic-ref HEAD 2>/dev/null)" == 'refs/heads/master' ]; then
                echo "Not on branch master"
                return 1
            fi              
            cower -df --ignorerepo "$pkgname" -t ..
            commit_if_changes "$srcpath" "Updated from AUR"
        }

build= 
        srcpath="$PWD"
        check_package_directory "$srcpath"
        buildpath="$(prepare_build "$srcpath")"
        pkgname="$(basename "$srcpath")"
        reponame="$(package_repo "$srcpath")"
        if [ "$reponame" == 'devel' ]; then
            ( package_download "$buildpath" )  > /dev/null 2>&1 
        else               
            package_download "$buildpath"
        fi               
        if package_uptodate "$buildpath"; then
            echo "Package is up to date. No need to rebuild."
        else
            package_build "$buildpath"
        fi
        if [ "$reponame" == 'devel' ]; then
            pkgbuild_update "$srcpath"
        fi

rebuild= 
        srcpath="$PWD"
        check_package_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        reponame="$(package_repo "$srcpath")"
        if [ -d "$buildpath" ]; then
            rm -Rf "$buildpath"
        fi
        buildpath="$(prepare_build "$srcpath")"
        package_build "$buildpath"
        if [ "$reponame" == 'devel' ]; then
            pkgbuild_update "$srcpath"
        fi

repoadd =
        srcpath="$PWD"
        check_package_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        reponame="$(package_repo "$MR_REPO")"
        package_repoadd "$buildpath" "$AB2_VAR_DIR/arch/$reponame"

repodel =
        srcpath="$PWD"
        check_package_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        reponame="$(package_repo "$MR_REPO")"
        package_repodel "$buildpath" "$AB2_VAR_DIR/arch/$reponame"

install= 
        srcpath="$PWD"
        check_package_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        package_install "$buildpath"

bump=
        srcpath="$PWD"
        check_package_directory "$srcpath"
        pkgbuild_bump "$srcpath"

installdeps=
        srcpath="$PWD"
        check_package_directory "$srcpath"
        package_install_deps "$buildpath"

update=
        mr build
        mr repoadd

