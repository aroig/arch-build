# ---------------------------------------------------------------------------- #
# Utility functions to handle arch linux package building and AUR downloads    #
# ---------------------------------------------------------------------------- #

lib=
        # Configuring paths
        archdir="$AB2_ARCH_DIR"
        builddir="$archdir/build"
        repodir="$archdir/repos"
        pkgbuilddir="$archdir/pkgbuild"
        # Error out if builddir does not exist
        if [ ! -d "$builddir" ]; then
            echo "ERROR: build directory does not exist. Please create it."
            echo "Path: $builddir"
            exit 1
        fi   
        # need to dereference symlinks! Otherwise subtle crap may happen when
        #  building stuff. For instance, emacs gets the autoloads paths wrong
        builddir="$(readlink -f "$builddir")"
        repodir="$(readlink -f "$repodir")"
        ##                     
        # commit_if_changes <path> <message>
        # Commits changes to a repo if there are any, otherwise do nothing.
        ##
        commit_if_changes() {
            local srcpath="$(readlink -f "$1")"
            local message="$2"
            (
                cd "$srcpath"
                local num="$(git status --porcelain | wc -l)"
                if [[ $num -ge 1 ]]; then            
                    git add -A .
                fi
                local num="$(git status --porcelain | wc -l)"
                if [[ $num -ge 1 ]]; then
                    git commit -m "$message ($num files)"
                fi
            )
        }
        ## 
        # pkgbuild_parse <path> <element>
        # Parse a pkgbuild file and return the given <element>
        ##
        pkgbuild_parse() {
            $archdir/bin/pkgbuild-parse.sh "$@"
        }
        ##
        # pkgbuild_packages <path>
        # Return list of packages a PKGBUILD will produce. May need
        # access to sources in order to compute the version
        ##
        pkgbuild_packages() {
            local srcpath="$(readlink -f "$1")"
            pkgbuild_parse "$srcpath/PKGBUILD" pkgfiles
        }
        ##
        # pkgbuild_sources <path>
        # List sources from the PKGBUILD
        ##
        pkgbuild_sources() {
            local srcpath="$(readlink -f "$1")"
            pkgbuild_parse "$srcpath/PKGBUILD" source
        }
        ##
        # package_uptodate <path>
        # Check whether the packages are up to date or needs building
        ##
        package_uptodate() {
            local srcpath="$(readlink -f "$1")"
            pkgbuild_packages "$srcpath" |
            while read pkg; do                           
                if [ ! -f  "$srcpath/$pkg" ]; then
                    return 1
                fi
            done
            return 0
        }
        ## 
        # package_repo <path>
        # Get the repo a package belongs
        ##
        package_repo() {
            local srcpath="$(readlink -f "$1")"            
            local srcdir="$(dirname "$srcpath")"
            echo "$(basename "$srcdir")"
        }
        ##
        # builddir_path <path>
        # Get the path of the directory where the package will be built.
        ##
        builddir_path() {
            local srcpath="$(readlink -f "$1")"
            local pkgname="$(basename "$srcpath")"
            echo "$builddir/$pkgname"           
        }
        ##
        # check_package_directory <path>
        # Fail if path does not contain a PKGBUILD
        ##
        check_package_directory () {
            local srcpath="$(readlink -f "$1")" 
            if [ ! -f "$srcpath/PKGBUILD" ]; then
                echo "Can't find a PKGBUILD in $1"
                exit 1
            fi   
        }
        ##
        # prepare_build <path>
        # Prepares a package for building on the builddir
        # returns the path where the building will occur
        ##
        prepare_build() {
            local srcpath="$(readlink -f "$1")"
            local buildpath="$(builddir_path "$srcpath")"
            rsync -avz --exclude=.git "$srcpath/" "$buildpath/" > /dev/null
            echo "$buildpath"            
        }
        ##
        # pkgbuild_update_from_build <path>
        # Updates the PKGBUILD from the one on the build dir (for updated version)
        ##
        pkgbuild_update() {
            local srcpath="$(readlink -f "$1")"
            local buildpath="$(builddir_path "$srcpath")"
            if [ -f "$buildpath/PKGBUILD" ]; then
                echo "Updating source PKGBUILD"
                cp "$buildpath/PKGBUILD" "$srcpath/PKGBUILD"
            fi 
            commit_if_changes "$srcpath" "Updated PKGBULD"            
        }
        ##
        # pkgbuild_bump <path>
        # Bump the pkgrel
        ##
        pkgbuild_bump() {
            local srcpath="$(readlink -f "$1")"
            local pkgbuild="$srcpath/PKGBUILD"            
            if [ -f "$pkgbuild" ]; then
                local pkgrel="$(pkgbuild_parse "$pkgbuild" pkgrel)"
                local pkgrel=`expr $pkgrel + 1`
                echo "Bumping pkgrel: $pkgrel"
                sed -i s/pkgrel=.*$/pkgrel=$pkgrel/ "$pkgbuild"
                commit_if_changes "$srcpath" "Bump pkgrel"            
            fi
        }
        ##
        # package_build <path>
        # Build a package at the given directory.
        ##
        package_build() {
            local srcpath="$(readlink -f "$1")"
            (
                cd "$srcpath"
                makepkg -f --sign
            )
        }
        ##
        # package_repackage <path>
        # Repackage a package at the given directory.
        ##
        package_repackage() {
            local srcpath="$(readlink -f "$1")"
            (
                cd "$srcpath"
                makepkg -f --repackage --sign
            )
        }
        ##
        # package_download <path>
        # Download package sources.
        ##
        package_download() {
            local srcpath="$(readlink -f "$1")"
            (
                cd "$srcpath"
                makepkg --nobuild
            )            
        }
        ##
        # package_install <path>
        # Install a package.
        ##
        package_install() {
            local srcpath="$(readlink -f "$1")"
            pkgbuild_packages "srcpath" |
            while read pkg; do
                if [ -f "$srcpath/$pkg" ]; then
                    sudo pacman --noconfirm -U "file://$srcpath/$pkg"               
                fi             
            done
        }
        ##
        # package_install_deps <path>
        # Install package deps.
        ##
        package_install_deps() {
            local srcpath="$(readlink -f "$1")"
            (
                cd "$srcpath"
                makepkg -s --nobuild --noextract --skipinteg
            )
        }
        ##
        # package_repoadd <path>
        # Add package to the pacman repo and clean older versions of it.
        ##
        package_repoadd() {
            local srcpath="$(readlink -f "$1")"
            local tgtrepo="$2"
            local repodb="$(basename "$tgtrepo").db.tar.gz"            
            local pkgname
            pkgbuild_packages "$srcpath" |
            while read pkg; do
                if [ -f "$srcpath/$pkg" ]; then
                    pkgname="${pkg%-*-*-*}"
                    # clean older packages
                    rm -f "$tgtrepo/$pkg-"*.pkg.tar.xz{,.sig}
                    # copy package and signature
                    cp "$srcpath/$pkg" "$tgtrepo/"
                    cp "$srcpath/$pkg.sig" "$tgtrepo/"
                    repo-add "$tgtrepo/$repodb" "$srcpath/$pkg"
                else
                    echo "package file not found: $pkg"
                    return 1
                fi
            done
        }
        package_repodel() {
            # package_repodel <path>
            # Delete a package from the repo.
            local srcpath="$(readlink -f "$1")"
            local tgtrepo="$2"
            local repodb="$(basename "$tgtrepo").db.tar.gz"
            local pkgname
            pkgbuild_packages "$srcpath" |
            while read pkg; do
                pkgname="${pkg%-*-*-*}"
                rm -f "$tgtrepo/$pkgname"-*.pkg.tar.xz{,.sig}
            done
            repo-remove "$tgtrepo/$repodb" "$srcpath/$pkgname"
        }
        ##
        # pkgbuild_checkout <path> <template>
        # Checkout a PKGBUILD from a template
        ##
        pkgbuild_checkout() {
            local srcpath="$1"
            local pkgname="$(basename "$srcpath")"
            local template="$pkgbuildir/$template/PKGBUILD.$2"
            if [ ! -f "$template" ]; then
                echo "There is no $(basename $template) template"
                exit 1
            fi 
            mkdir "$pkgname"
            (
                cd "$pkgname"
                cp "$template" PKGBUILD
                sed -i "s/@pkgname@/${pkgname%-dev}/g" PKGBUILD
                git init
                commit_if_changes "$srcpath" 'Initial commit'
            )
        }
        ##
        # aur_checkout <path>
        # Checkout a PKGBUILD from AUR
        ##
        aur_checkout() {
            local srcpath="$1"
            local pkgname="$(basename "$srcpath")"
            cower -df --ignorerepo "$pkgname"
            (
                cd "$pkgname"
                git init
                commit_if_changes "$srcpath" 'Initial commit'
            )
        }
        ##
        # aur_update <path>
        # Update git repo with last PKGBUILD from AUR.                                   
        ##
        aur_update() {
            local srcpath="$(readlink -f "$1")"
            local pkgname="$(basename "$srcpath")"
            # NOTE: only update on branch master, to preserve possible local changes.
            if [ ! "$(git symbolic-ref HEAD 2>/dev/null)" == 'refs/heads/master' ]; then
                echo "Not on branch master"
                return 1
            fi              
            cower -df --ignorerepo "$pkgname" -t ..
            commit_if_changes "$srcpath" "Updated from AUR"
        }
        ##
        # sources_pull <path>
        # Pulls all sources pointing to a local git repo.
        ##
        sources_pull() {
            local srcpath="$1"
            local pkgname="$(basename "$srcpath")"
            check_package_directory "$srcpath"
            pkgbuild_sources "$srcpath" |
            while read src; do
                local reponame=$(echo "$src" | sed 's|^\(.*\)::.*$|\1|')
                local repopath=$(echo "$src" | sed 's|^.*file://\(.*\)$|\1|')
                if [ -d "$repopath" ]; then
                    (
                        cd "$repopath"
                        mr update
                    )                    
                    # NOTE: If I symlink to local repos instead of listing in the sources 
                    # variable of the PKGBUILD, I could save disk on the build dir, but 
                    # unfortunately makepkg does not understand it.
                    # rm -Rf "$reponame"
                    # ln -sfv "$repopath" "$reponame"
                fi   
            done
        }
        ##
        # sources_changelog <path>
        # Prints a changelog of the last pull for all local git sources
        # More concreately, prints a concise log between between last reflog jump @{1}..@{0}.
        ##
        sources_changelog() {
            local srcpath="$1"
            local pkgname="$(basename "$srcpath")"
            check_package_directory "$srcpath"
            pkgbuild_sources "$srcpath" |
            while read src; do
                local reponame=$(echo "$src" | sed 's|^\(.*\)::.*$|\1|')
                local repopath=$(echo "$src" | sed 's|^.*git+file://\(.*\)$|\1|')
                if [ -d "$repopath" ]; then
                    (
                        cd "$repopath"
                        git --no-pager log --pretty=format:"%C(cyan)%h %C(green)[%ad] %C(red)%an%C(reset). %s%d" --graph --date=relative @{1}..@{0}
                        echo ""                    
                    )                    
                fi   
            done
        }
        

build= 
        srcpath="$PWD"
        check_package_directory "$srcpath"
        buildpath="$(prepare_build "$srcpath")"
        pkgname="$(basename "$srcpath")"
        reponame="$(package_repo "$srcpath")"
        if [ "$reponame" == 'devel' ]; then
            ( package_download "$buildpath" )  > /dev/null 2>&1 
        else               
            package_download "$buildpath"
        fi               
        if package_uptodate "$buildpath"; then
            echo "Package is up to date. No need to rebuild."
        else
            package_build "$buildpath"
        fi
        if [ "$reponame" == 'devel' ]; then
            pkgbuild_update "$srcpath"
        fi

rebuild= 
        srcpath="$PWD"
        check_package_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        reponame="$(package_repo "$srcpath")"
        if [ -d "$buildpath" ]; then
            rm -Rf "$buildpath"
        fi
        buildpath="$(prepare_build "$srcpath")"
        package_build "$buildpath"
        if [ "$reponame" == 'devel' ]; then
            pkgbuild_update "$srcpath"
        fi

repackage= 
        srcpath="$PWD"
        check_package_directory "$srcpath"
        buildpath="$(prepare_build "$srcpath")"
        reponame="$(package_repo "$srcpath")"
        package_repackage "$buildpath"
        if [ "$reponame" == 'devel' ]; then
            pkgbuild_update "$srcpath"
        fi

repoadd =
        srcpath="$PWD"
        check_package_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        reponame="$(package_repo "$MR_REPO")"
        mkdir -p "$repodir/$reponame"
        package_repoadd "$buildpath" "$repodir/$reponame"

repodel =
        srcpath="$PWD"
        check_package_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        reponame="$(package_repo "$MR_REPO")"
        package_repodel "$buildpath" "$repodir/$reponame"

install= 
        srcpath="$PWD"
        check_package_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        package_install "$buildpath"

installdeps=
        srcpath="$PWD"
        check_package_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        package_install_deps "$buildpath"

bump=
        srcpath="$PWD"
        check_package_directory "$srcpath"
        pkgbuild_bump "$srcpath"

update=
        mr build
        mr repoadd

pull=
        srcpath="$PWD"
        sources_pull "$srcpath"

changelog=
        srcpath="$PWD"        
        sources_changelog "$srcpath"

ichangelog=
        srcpath="$PWD"        
        pkgname="$(basename "$srcpath")"
        if pacman -Qqu | grep "$pkgname" > /dev/null; then
            sources_changelog "$srcpath"
            read -p "Return to continue." ret
        fi
